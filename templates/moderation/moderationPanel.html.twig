{% extends 'base.html.twig' %}

{% block title %}ModÃ©ration{% endblock %}

{% block stylesheets %}
    <style>
        tfoot {
            border-top: whitesmoke 2px solid;
        }

        .selection-commands {
            display: flex;
            justify-content: space-around;
            align-items: center;
            flex-wrap: wrap;
        }
    </style>
{% endblock %}

{% block header %}
    <header>
        <h1>ModÃ©ration</h1>
    </header>
{% endblock %}

{% block body %}

    <div id="filter-commands">
        <a class="btn btn-primary" href="{{ path("moderation_panel_filter", {"page": paginator.currentPage, "filter": 0}) }}">Afficher les commentaires approuvÃ©s</a>
        <a class="btn btn-primary" href="{{ path("moderation_panel_filter", {"page": paginator.currentPage, "filter": 2}) }}">Masquer les commentaires approuvÃ©s</a>
    </div>
    
    {% if comments %}
        <table>
            <thead>
                <tr>
                    <th>SÃ©lection</th>
                    <th>Status</th>
                    <th>Auteur</th>
                    <th>Commentaire</th>
                    <th>Trick</th>
                    <th>Date</th>
                    <th>Commandes</th>
                </tr>
            </thead>
            <tbody>
                {% set i = 0 %}
                {% for comment in comments %}
                    <tr>
                        <td>
                            <input type="checkbox" class="select-comment-checkbox" commentid="{{ comment.id }}">
                        </td>
                        <td>
                            {% if comment.approved %}
                                <a href="{{ path("moderation_approve_comment", {"id": comment.id, "approved": 0, "page": paginator.currentPage}) }}">ApprouvÃ©</a>
                            {% else %}
                                <a href="{{ path("moderation_approve_comment", {"id": comment.id, "approved": 1, "page": paginator.currentPage}) }}">En attente</a>
                            {% endif %}
                        </td>
                        <td>
                            <span>{{ comment.author.name }}</span>
                        </td>
                        <td>
                            <span id="comment-content-{{ comment.id }}">{{ comment.content }}</span>
                            <div class="edit-form d-none" id="edit-form-{{ comment.id }}">
                                {{ form_start(commentEditForms[i]) }}
                                {{ form_widget(commentEditForms[i].content) }}
                                <button type="submit" class="btn btn-secondary">Modifier</button>
                                {{ form_end(commentEditForms[i]) }}
                            </div>
                        </td>
                        <td>
                            <a href="{{ path("trick_show", {"id": comment.trick.id}) }}">{{ comment.trick.name }}</a>
                        </td>
                        <td>
                            <span>{{ comment.createdAt|date('d/m/Y Ã  h:m') }}</span>
                        </td>
                        <td class="d-flex">
                            <button class="btn btn-secondary edit-btn" commentid="{{ comment.id }}">ðŸ–‰</button>
                            <a class="btn btn-secondary" href="{{ path("moderation_delete_comment", {"id": comment.id, "page": paginator.currentPage}) }}">ðŸ—‘</a>
                        </td>
                    </tr>
                    {% set i = i + 1 %}
                {% endfor %}
            </tbody>
            <tfoot>
                <tr>
                    <td class="py-4" colspan="1">
                        <input type="checkbox" id="select-all"><label class="ml-3" for="select-all">*</label>
                    </td>
                    <td colspan="3">
                        <div class="selection-commands">
                            <span>Avec la sÃ©lection :</span>
                            <a id="approve-selection-button" class="btn btn-success my-2" href="{{ path("moderation_handle_comments", {"task": "approve", "page": paginator.currentPage}) }}">Approuver</a>
                            <a id="disapprove-selection-button" class="btn btn-warning my-2" href="{{ path("moderation_handle_comments", {"task": "disapprove", "page": paginator.currentPage}) }}">DÃ©sapprouver</a>
                            <a id="delete-selection-button" class="btn btn-danger my-2" href="{{ path("moderation_handle_comments", {"task": "delete", "page": paginator.currentPage}) }}">Supprimer</a>
                        </div>
                    </td>
                    <td colspan="3">
                        <div class="d-flex justify-content-around align-items-center">
                            <div>{{ paginator.currentPage }}/{{ paginator.pagesCount }}</div>
                            {% if paginator.currentPage > 1 %}
                                <a class="btn btn-secondary d-block" href="{{ path("moderation_panel_filter", {"page": paginator.currentPage - 1, "filter": filter}) }}">ðŸ¡„</a>
                            {% endif %}
                            {% if paginator.currentPage < paginator.pagesCount %}
                                <a class="btn btn-secondary d-block" href="{{ path("moderation_panel_filter", {"page": paginator.currentPage + 1, "filter": filter}) }}">ðŸ¡†</a>
                            {% endif %}
                        </div>
                    </td>
                </tr>
            </tfoot>
        </table>

        {# Hidden form to edit selection #}
        <form style="display: none" id="selected-comments-form" action="" method="post"></form>

    {% else %}
        <p>Il n'y a aucun commentaire.</p>
    {% endif %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        var moderation = {

            /**
             * Show either the content of a comment in a form or in a div
             *
             * @param buttonElt
             */
            switchEditionForm: function (buttonElt) {
                var commentId = buttonElt.getAttribute("commentid"),
                    formElt = document.getElementById("edit-form-" + commentId),
                    contentElt = document.getElementById("comment-content-" + commentId);

                if (formElt.classList.contains("d-none")) {
                    formElt.classList.remove("d-none");
                    contentElt.classList.add("d-none");
                } else {
                    formElt.classList.add("d-none");
                    contentElt.classList.remove("d-none");
                }
            },

            /**
             * Build the form containing the selected comments ids and submit it
             */
            handleSelection: function (formAction) {

                var selectedCommentsFormElt = document.getElementById("selected-comments-form"),
                    checkBoxElts = document.getElementsByClassName("select-comment-checkbox"),
                    selectedCommentId,
                    selectedCommentsIds = [];

                // Get selected comments ids
                for (let checkboxElt of checkBoxElts) {
                    if (selectedCommentId = getSelectedCommentId(checkboxElt)) {
                        selectedCommentsIds.push(selectedCommentId);
                    }
                }

                // Set the form and submit
                selectedCommentsFormElt.action = formAction;
                addCommentsIdsInputs(selectedCommentsFormElt, selectedCommentsIds);
                selectedCommentsFormElt.submit();

                /**
                 * Get the commentid attribute of a checkbox element
                 *
                 * @param checkboxElt
                 * @returns {*}
                 */
                function getSelectedCommentId(checkboxElt){

                    if (checkboxElt.checked && checkboxElt.hasAttribute("commentid")) {
                        return checkboxElt.getAttribute("commentid");
                    }
                    return null;
                }

                /**
                 * Fill the form with inputs containing the ids
                 *
                 * @param formElt
                 * @param ids
                 */
                function addCommentsIdsInputs(formElt, ids) {

                    let inputElt;

                    for (id of ids) {
                        inputElt = document.createElement('input');
                        inputElt.name = "comments-ids[]";
                        inputElt.value = id;
                        formElt.appendChild(inputElt);
                    }
                }
            },

            /**
             * Select or deselect all commits at once
             *
             * @param mainCheckboxElt
             */
            switchSelectAll: function (mainCheckboxElt) {

                var checkboxElts = document.getElementsByClassName("select-comment-checkbox");

                for (checkboxElt of checkboxElts) {
                    checkboxElt.checked = mainCheckboxElt.checked;
                }
            }
        };

        // Event listeners

        // Switch edition form
        let editBtnElts = document.getElementsByClassName("edit-btn");
        for (let i = 0, size = editBtnElts.length; i < size; i++) {
            editBtnElts[i].addEventListener("click", function (event) {
                event.preventDefault();
                moderation.switchEditionForm(event.target);
            });
        }

        // Handle multiple selection
        document.getElementById("approve-selection-button").addEventListener("click", (event) => {
            event.preventDefault();
            moderation.handleSelection(event.target.href);
        });

        // Select all
        document.getElementById("select-all").addEventListener("click", (event) => {
            moderation.switchSelectAll(event.target);
        });
    </script>
{% endblock %}
